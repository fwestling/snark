#!/bin/bash

# This file is part of snark, a generic and flexible library for robotics research
# Copyright (c) 2016 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

scriptname=$( basename $0 )

source $( type -p comma-application-util ) || { echo "$scriptname: cannot source comma-application-util" >&2; exit 1; }

function description()
{
    cat <<EOF
--help,-h; show this help and exit
--verbose,-v; show more information
--config=<config>; sensor config
--config-sample; show config sample and exit
--log-directly; use a log filter to log directly to file
--period=<sec>; logging period
EOF
}

function usage()
{
    cat <<EOF

log a basler sensor

usage: $scriptname [<options>]

options:
EOF
    description | sed 's/^/    /g' >&2
    cat <<EOF >&2

<config> is the file:path to the specific sensor config.

This command optionally uses the log filter to directly log to a file.
For high throughput data this is more efficient than using stdout.

If "port" is defined in the config file the data is also published when logging.

example:
    $scriptname --config=config.json --period=60

EOF
    exit
}

function config_sample()
{
    cat <<EOF
{
    "basler-aca1300-75gm":
    {
        "address": "localhost",
        "port": 55100,
        "binary": "t,3ui,614400ub",
        "fields": "t",
        "image-size": "1280,480",
        "image-offset": "0,0",
        "pixel-format": "Mono8",

        "device":
        {
            "address": "169.254.166.97",
            "serial-number": "21991077",   // alternative to "address"
            "exposure": 5000,              // in Âµs or an auto option
            "exposure-limit": { "lower": 80, "upper": 10000 },
            "gain": 136,                   // raw units or dB or auto option
            "frame-rate": 50               // fps
        },

        "gige":
        {
            "packet-size": 8192,
            "inter-packet-delay": 15000,   // transmission delay in ticks
            "num-cameras": 2               // auto-calculate inter-packet-delay
        }
    }
}
EOF
    exit
}

function say() { echo "$scriptname: $@" >&2; }
function verbose() { (( options_verbose )) && say "$@"; }
function die() { say "$@"; exit 1; }

(( $( comma_options_has "--bash-completion" $@ ) )) && { description | comma_options_to_bash_completion; exit 0; }
(( $( comma_options_has "--help" $@ ) || $( comma_options_has "-h" $@ ) )) && usage
(( $( comma_options_has "--config-sample" $@ ) )) && config_sample

options="$( description | comma-options-to-name-value "$@" )"
comma_path_value_to_var --prefix=options < <( echo "$options" | grep '=' )

function load_config()
{
    local file path
    IFS=: read file path <<< "$1"
    cat "$file" | name-value-get "$path"
}

verbose "loading sensor config $options_config"

comma_path_value_to_var --prefix=config < <( load_config $options_config )

IFS=, read width height <<< $config_image_size
IFS=, read offset_x offset_y <<< $config_image_offset

args=
[[ $config_device_address ]] && args+=" --address $config_device_address"
[[ $config_device_serial_number ]] && args+=" --serial-number $config_device_serial_number"
[[ $width ]] && args+=" --width=$width"
[[ $height ]] && args+=" --height=$height"
[[ $offset_x ]] && args+=" --offset-x=$offset_x"
[[ $offset_y ]] && args+=" --offset-y=$offset_y"
[[ $config_pixel_format ]] && args+=" --pixel-format=$config_pixel_format"
[[ $config_device_exposure ]] && args+=" --exposure=$config_device_exposure"
[[ $config_device_exposure_limit_lower ]] && args+=" --exposure-lower-limit=$config_device_exposure_limit_lower"
[[ $config_device_exposure_limit_upper ]] && args+=" --exposure-upper-limit=$config_device_exposure_limit_upper"
[[ $config_device_gain ]] && args+=" --gain=$config_device_gain"
[[ $config_device_frame_rate ]] && args+=" --frame-rate=$config_device_frame_rate"
[[ $config_gige_packet_size ]] && args+=" --packet-size=$config_gige_packet_size"
[[ $config_gige_inter_packet_delay ]] && args+=" --inter-packet-delay=$config_gige_inter_packet_delay"
[[ $config_gige_num_cameras ]] && args+=" --num-cameras=$config_gige_num_cameras"
[[ $options_verbose ]] && args+=" --verbose"
args=${args# }

[[ $config_port ]] && publish_command="io-publish tcp:$config_port --size $( csv-size $config_binary )"

filters=
if [[ $options_log_directly ]]; then
    log_options=".,period:$options_period,index"
    [[ $publish_command ]] || log_options+=";null"
    filters+=" log=$log_options"
fi
filters=${filters# }

basler_command="basler-cat $filters $args"

verbose "logging with \"$basler_command\""
[[ $publish_command ]] && verbose "publishing with \"$publish_command\""

shutdown=0

trap "shutdown=1" INT TERM HUP PIPE

while (( ! shutdown )); do
    if [[ $publish_command ]]; then
        $basler_command | $publish_command
    else
        $basler_command
    fi
    (( shutdown )) || say "restarting ${basler_command%% *}"
done
