#!/bin/bash

# This file is part of snark, a generic and flexible library for robotics research
# Copyright (c) 2017 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

scriptname=$( basename $0 )

source $( type -p comma-application-util ) || { echo "$scriptname: cannot source comma-application-util" >&2; exit 1; }

default_config_path=/

function description()
{
    cat <<EOF
--help,-h;                  output help
--verbose,-v;               more output to stderr
--config,-c=[<file>];       config file with optional path
--config-sample;            show config sample and exit
--host=[<address>];         host address for weather station
--port=[<port>];            default=22222; port to read
--packet=<name>;            default=loop2; packet to request
--interval=<secs>;          default=60; interval between readings
--available-fields;         output available fields for packet
--select-fields=[<fields>]; output only given fields
--output-fields;            print output fields and exit
--output-format;            print output format and exit
--raw;                      output raw data
--convert;                  convert previously captured raw data
EOF
}

function usage()
{
cat <<EOF

read data from a Davis Vantage weather station

usage: $scriptname --host=<address> [<options>]
       $scriptname --config=<config.json> [<options>]
       cat raw.csv | $scriptname --convert [<options>]

options
EOF
    description | sed 's/^/    /g'
    cat <<EOF

Each packet type has it's own set of fields, shown by --available-fields, and
default output fields, shown by --output-fields. The fields that are output can
be overridden by setting --select-fields.

units
    for many sensors the raw data is converted to more useful units:
        temperature is in Â°C
        barometric pressure is in bar
        wind speed is m/s
        rain is in mm
        rain rate is in mm/hr
    Some of these are units conventionally used, rather than SI units.
    Consult the Reference Manual for the original data formats.

invalid values
    floating point numbers (e.g. temperature) are checked for invalid sensor
    readings and, if so, are flagged with NaN. Integer values (e.g. humidity)
    are not checked but will generally be 255 if invalid. Refer to the
    Reference Manual for details.

references
    Vantage Serial Communication Reference Manual - contains protocol spec

examples
    $scriptname
    $scriptname --config config.json:vantage-pro2
    $scriptname --host 172.21.64.153
    $scriptname --select-fields="wind/gust/10_minute"
    $scriptname --packet=loop --available-fields
    $scriptname --packet=loop --output-fields
    $scriptname | name-value-from-csv -f \$( $scriptname --output-fields )

EOF
    exit
}

function config_sample()
{
    cat <<EOF
{
    "host": "172.21.64.153",
    "port": 22222,
    "packet": "loop2",
    "interval": 60,
    "fields": "barometer/reading,temperature/inside,humidity/inside"
}
EOF
    exit
}



function say() { echo "$scriptname: $@" >&2; }
function verbose() { (( options_verbose )) && say "$@"; }
function die() { say "$@"; exit 1; }

(( $( comma_options_has "--bash-completion" $@ ) )) && { description | comma_options_to_bash_completion; exit 0; }

(( $( comma_options_has "--help" $@ ) || $( comma_options_has "-h" $@ ) )) && usage
(( $( comma_options_has "--config-sample" $@ ) )) && config_sample

options="$( description | comma-options-to-name-value "$@" )"
comma_path_value_to_var --prefix=options < <( echo "$options" | grep '=' )

if [[ $options_config ]]; then
    IFS=: read config_file config_path <<< "$options_config"
    config_path=${config_path:-$default_config_path}
    comma_path_value_to_var --prefix=config < <( name-value-get $config_path < $config_file )
    options_host=${options_host:-$config_host}
    (( ! $( comma_options_has "--port" $@ ) )) && [[ $config_port ]] && options_port=$config_port
    (( ! $( comma_options_has "--packet" $@ ) )) && [[ $config_packet ]] && options_packet=$config_packet
    (( ! $( comma_options_has "--interval" $@ ) )) && [[ $config_interval ]] && options_interval=$config_interval
    options_select_fields=${options_select_fields:-$config_fields}
fi

packet_spec_fields="field,packet_format,output_format,conversion_function,is_default"
packet_spec_format="s[128],s[10],s[10],s[128],b"

declare -A commands packet_spec

commands[loop]="LOOP"

read -r -d '' packet_spec[loop] <<'EOF'
command,s[3],s[3],none,0
barometer/trend,b,b,none,1
packet/type,ub,ub,none,0
next_record,uw,uw,none,0
barometer/reading,uw,d,barometric_pressure,1
temperature/inside,w,d,temperature,1
humidity/inside,ub,ui,none,1
temperature/outside,w,d,temperature,1
wind/speed/reading,ub,f,mph_to_ms,1
wind/speed/average/10_minute,ub,f,mph_to_ms,1
wind/dir,uw,ui,none,1
temperature/extra/1,ub,i,temperature_extra,0
temperature/extra/2,ub,i,temperature_extra,0
temperature/extra/3,ub,i,temperature_extra,0
temperature/extra/4,ub,i,temperature_extra,0
temperature/extra/5,ub,i,temperature_extra,0
temperature/extra/6,ub,i,temperature_extra,0
temperature/extra/7,ub,i,temperature_extra,0
temperature/soil/1,ub,i,temperature_extra,0
temperature/soil/2,ub,i,temperature_extra,0
temperature/soil/3,ub,i,temperature_extra,0
temperature/soil/4,ub,i,temperature_extra,0
temperature/leaf/1,ub,i,temperature_extra,0
temperature/leaf/2,ub,i,temperature_extra,0
temperature/leaf/3,ub,i,temperature_extra,0
temperature/leaf/4,ub,i,temperature_extra,0
humidity/outside,ub,ui,none,1
humidity/extra/1,ub,ui,none,0
humidity/extra/2,ub,ui,none,0
humidity/extra/3,ub,ui,none,0
humidity/extra/4,ub,ui,none,0
humidity/extra/5,ub,ui,none,0
humidity/extra/6,ub,ui,none,0
humidity/extra/7,ub,ui,none,0
rain/rate,uw,d,clicks_to_mm,1
uv,ub,ub,none,1
solar_radiation,uw,ui,none,1
storm/rain,uw,d,clicks_to_mm,1
storm/start,uw,uw,none,1
rain/day,uw,d,clicks_to_mm,1
rain/month,uw,d,clicks_to_mm,1
rain/year,uw,d,clicks_to_mm,1
evapotranspiration/day,uw,d,thou_to_m,0
evapotranspiration/month,uw,d,thou_to_m,0
evapotranspiration/year,uw,d,thou_to_m,0
soil/moisture/1,ub,ub,none,0
soil/moisture/2,ub,ub,none,0
soil/moisture/3,ub,ub,none,0
soil/moisture/4,ub,ub,none,0
leaf/wetness/1,ub,ub,none,0
leaf/wetness/2,ub,ub,none,0
leaf/wetness/3,ub,ub,none,0
leaf/wetness/4,ub,ub,none,0
alarms/inside,ub,ub,none,0
alarms/rain,ub,ub,none,0
alarms/outside,ub,ub,none,0
alarm/extra/1,uw,uw,none,0
alarm/extra/2,ub,ub,none,0
alarm/extra/3,ub,ub,none,0
alarm/extra/4,ub,ub,none,0
alarm/extra/5,ub,ub,none,0
alarm/extra/6,ub,ub,none,0
alarm/extra/7,ub,ub,none,0
alarm/extra/8,ub,ub,none,0
soil_and_leaf/alarm/1,ub,ub,none,0
soil_and_leaf/alarm/2,ub,ub,none,0
soil_and_leaf/alarm/3,ub,ub,none,0
soil_and_leaf/alarm/4,ub,ub,none,0
battery/tx/status,ub,ub,none,1
battery/console/voltage,w,d,battery_voltage,1
forecast/icons,ub,ub,none,0
forecast/rule_number,ub,ub,none,0
time/sunrise,uw,uw,none,1
time/sunset,uw,uw,none,1
packet/lf,ub,ub,none,0
packet/cr,ub,ub,none,0
packet/crc,uw,uw,none,0
EOF

commands[loop2]="LPS 2"

read -r -d '' packet_spec[loop2] <<'EOF'
command,s[3],s[3],none,0
barometer/trend,b,b,none,1
packet/type,ub,ub,none,0
unused/01,uw,uw,none,0
barometer/reading,uw,d,barometric_pressure,1
temperature/inside,w,d,temperature,1
humidity/inside,ub,ui,none,1
temperature/outside,w,d,temperature,1
wind/speed/reading,ub,d,mph_to_ms,1
unused/02,ub,ub,none,0
wind/direction,uw,ui,none,1
wind/speed/average/10_minute,uw,d,wind_speed_average,1
wind/speed/average/2_minute,uw,d,wind_speed_average,1
wind/gust/10_minute,uw,d,wind_speed_average,1
wind/gust_dir/10_minute,uw,ui,none,1
unused/03,uw,uw,none,0
unused/04,uw,uw,none,0
dew_point,w,f,fahrenheit_to_celcius,1
unused/05,ub,ub,none,0
humidity/outside,ub,ui,none,1
unused/06,ub,ub,none,0
heat_index,w,f,fahrenheit_to_celcius,1
wind/chill,w,f,fahrenheit_to_celcius,1
thsw_index,w,f,fahrenheit_to_celcius,1
rain/rate,uw,d,clicks_to_mm,1
uv,ub,ub,none,1
solar_radiation,uw,ui,none,1
storm/rain,uw,d,clicks_to_mm,1
storm/start,uw,uw,none,1
rain/day,uw,d,clicks_to_mm,1
rain/last/15_minute,uw,d,clicks_to_mm,1
rain/last/hour,uw,d,clicks_to_mm,1
evapotranspiration/day,uw,d,thou_to_m,0
rain/last/24_hours,uw,d,clicks_to_mm,1
barometric/reduction_method,ub,ub,none,1
barometric/offset,uw,d,thou_to_m,1
barometric/calibration,uw,d,thou_to_m,1
barometric/sensor/raw,uw,d,barometric_pressure,1
barometric/pressure,uw,d,barometric_pressure,1
altimeter,uw,d,thou_to_m,1
unused/07,ub,ub,none,0
unused/08,ub,ub,none,0
wind/speed/graph/10_minute,ub,ub,none,0
wind/speed/graph/15_minute,ub,ub,none,0
wind/speed/graph/hour,ub,ub,none,0
wind/speed/graph/day,ub,ub,none,0
rain/graph/minute,ub,ub,none,0
storm/graph,ub,ub,none,0
rain/minute_index,ub,ub,none,0
rain/graph/next_monthly,ub,ub,none,0
rain/graph/next_yearly,ub,ub,none,0
rain/graph/next_seasonal,ub,ub,none,0
unused/09,uw,uw,none,0
unused/10,uw,uw,none,0
unused/11,uw,uw,none,0
unused/12,uw,uw,none,0
unused/13,uw,uw,none,0
unused/14,uw,uw,none,0
packet/lf,ub,ub,none,0
packet/cr,ub,ub,none,0
packet/crc,uw,uw,none,0
EOF

# these need to be equations that csv-eval will understand
# constants are kept separate, rather than folded, for clarity of derivation
read -r -d '' conversion_functions <<'EOF'
barometric_pressure,x / 1000 * 0.0338638866667
battery_voltage,x * 300 / 512 / 100
clicks_to_mm,x / 5
fahrenheit_to_celcius,( x - 32 ) * 5 / 9
mph_to_ms,x * 1.60934 * 1000 / 3600
temperature,( x / 10 - 32 ) * 5 / 9
temperature_extra,( x - 90 - 32 ) * 5 / 9
thou_to_m,x / 1000 * 25.4 / 1000
wind_speed_average,x / 10 * 1.60934 * 1000 / 3600
EOF

# determine the value that is used to indicate invalid data
# dew_point etc are exceptions, despite being word-sized data, they use 255 to indicate invalid
function invalid_data_designators()
{
    echo "${packet_spec[loop2]}" \
        | csv-select --fields=$packet_spec_fields --format=$packet_spec_format "output_format;regex=(f|d)" \
        | csv-shuffle --fields=$packet_spec_fields --output field,packet_format \
        | sed -r '/^(dew_point|heat_index|wind\/chill|thsw_index)/s/,w$/,ub/' \
        | sed -r 's/,b$/,127/;s/,ub$/,255/;s/,w$/,32767/;s/,uw$/,65536/'
}

cmd=${commands[$options_packet]}

function get_packet_spec()
{
    local field=$1
    local select_fn=cat
    local sort_fn=cat

    if [[ $2 ]]; then
        local select_field select_value
        IFS='=' read select_field select_value <<< $2
        select_fn="csv-select --fields $packet_spec_fields --format=$packet_spec_format $select_field;equals=$select_value"
        sort_fn=sort
    fi

    echo "${packet_spec[$options_packet]}" | $select_fn \
        | csv-shuffle --fields $packet_spec_fields --output $field \
        | $sort_fn | tr '\n' , | sed 's/,$//'
}

packet_fields=$( get_packet_spec field )
packet_format=$( get_packet_spec packet_format )
default_fields=$( get_packet_spec field is_default=1 )

[[ $cmd ]] || die "unknown packet, choose one of: ${!commands[@]}"

output_fields=timestamp,${options_select_fields:-$default_fields}

function get_output_format()
{
    local format_field=$1
    echo $output_fields | tr , '\n' \
        | csv-join --fields=field <( echo "${packet_spec[$options_packet]}" )";fields=$packet_spec_fields" --string \
        | csv-shuffle --fields field1,$packet_spec_fields --output $format_field \
        | tr '\n' , | sed 's/,$//' | csv-format collapse
}

output_format=t,$( get_output_format output_format )
output_packet_format=t,$( get_output_format packet_format )

[[ $options_available_fields ]] && { echo $packet_fields | tr , '\n' | sort; exit 0; }
[[ $options_output_fields ]] && { echo $output_fields; exit; }
[[ $options_output_format ]] && { [[ $options_raw ]] && echo $output_packet_format || echo $output_format; exit; }

packet_size=$( csv-size $packet_format )

socat_inactivity_timeout=2   # wait 2 seconds for no input before closing socat
sleep_interval=$(( options_interval - socat_inactivity_timeout ))
(( sleep_interval < 0 )) && sleep_interval=0

# construct functions that will output NaN if the sensor data is invalid
function invalid_values_functions()
{
    invalid_data_designators \
        | grep -E "^($( echo $output_fields | sed 's/,/|/g' ))," \
        | sed -r 's#/#_#g;s/(.*),(.*)/\1=where( \1 == \2, nan, \1 )/' \
        | tr '\n' ';'
}

# extract only the conversions that we need, otherwise csv-eval will fail
function relevant_conversions()
{
    echo "$output_fields" | tr , '\n' \
        | csv-join --fields=field <( echo "${packet_spec[$options_packet]}" )";fields=$packet_spec_fields" --string \
        | csv-select --fields field1,$packet_spec_fields --format=s[128],$packet_spec_format "conversion_function;not-equal=none" \
        | csv-shuffle --fields field1,$packet_spec_fields --output field1,conversion_function \
        | csv-join --fields=field,conversion_function <( echo "$conversion_functions" )";fields=conversion_function,formula" --string \
        | csv-shuffle --fields field,,,formula --output field,formula \
        | gawk -F, 'BEGIN{ OFS="="; } { gsub( "/", "_", $1 ); gsub( "x", $1, $2 ); print; }' \
        | tr '\n' ';'
}

function convert_raw()
{
    if [[ $options_raw ]]; then
        cat
    else
        csv-eval --fields=$output_fields --format=$output_format "$( invalid_values_functions )" --full-xpath \
            | csv-eval --fields=$output_fields --format=$output_format "$( relevant_conversions )" --full-xpath
    fi
}

[[ $options_convert ]] && { convert_raw; exit; }

# Request one packet at a time in a loop
#
# We should be able to request a stream of packets, by not including a packet
# count, but in testing this didn't work with the LPS command, only with LOOP.
# We probably don't want this mode in production anyway.

while : ; do
    echo "$cmd 1" | socat -T$socat_inactivity_timeout tcp:$options_host:$options_port -,ignoreeof \
        | dd ibs=1 obs=$packet_size skip=1 2>/dev/null \
        | csv-crc recover --size=$packet_size --crc=xmodem --big-endian \
        | csv-time-stamp --size=$packet_size \
        | csv-shuffle --fields=timestamp,$packet_fields --binary=t,$packet_format --output=$output_fields \
        | csv-from-bin $output_packet_format \
        | convert_raw
    sleep $sleep_interval       # assumes that the above takes $socat_inactivity_timeout secs only
done
